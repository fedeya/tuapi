use crate::app::Input;

pub fn move_cursor_left(input: &mut Input) {
    let new_pos = if input.cursor_position.x == 0 {
        0
    } else {
        input.cursor_position.x - 1
    };

    input.cursor_position.x = new_pos.clamp(0, input.text.chars().count().try_into().unwrap());
}

pub fn move_cursor_right(input: &mut Input) {
    let max_line_x = input.text.lines().enumerate().find(|(index) index == input.cursor_position.y)

    let new_pos = input.cursor_position.x + 1;

    input.cursor_position.x = new_pos.clamp(0, input.text.chars().count().try_into().unwrap());
}

pub fn move_cursor_up(input: &mut Input) {
    input.cursor_position.y -= 1;
}

pub fn move_cursor_down(input: &mut Input) {
    input.cursor_position.y += 1;
}

pub fn move_cursor_to_start_of_line(input: &mut Input) {
    unimplemented!()
}

pub fn move_cursor_to_end_of_line(input: &mut Input) {
    input.cursor_position.x = input.text.len().try_into().unwrap();
}

pub fn remove_char_before_cursor(input: &mut Input) {
    let removable = input.cursor_position.x != 0;

    if !removable {
        return;
    }

    input.text.remove(input.cursor_position.x as usize - 1);
    input.cursor_position.x -= 1;
}

pub fn add_char_at_cursor(input: &mut Input, c: char) {
    if input.text.lines().count() <= 1 {
        add_char_at_cursor_single_line(input, c);
    } else {
        add_char_at_cursor_multi_line(input, c);
    }
}

fn add_char_at_cursor_single_line(input: &mut Input, c: char) {
    input.text.insert(input.cursor_position.x.into(), c);

    move_cursor_right(input)
}

fn add_char_at_cursor_multi_line(input: &mut Input, c: char) {
    let new_text = input
        .text
        .lines()
        .enumerate()
        .map(|(index, line)| {
            let is_cursor_in_line = index == usize::from(input.cursor_position.y);

            if !is_cursor_in_line {
                return String::from(line);
            }

            let mut new_line = String::from(line);

            new_line.insert(input.cursor_position.x.into(), c);

            new_line
        })
        .collect::<Vec<String>>()
        .join("\n");

    input.text = new_text;
    move_cursor_right(input)
}

pub fn add_newline_at_cursor(input: &mut Input) {
    add_char_at_cursor(input, '\n');
    add_char_at_cursor(input, ' ');

    input.cursor_position.x = 0;
    input.cursor_position.y += 1;
}
